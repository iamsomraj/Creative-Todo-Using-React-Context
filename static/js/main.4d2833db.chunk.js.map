{"version":3,"sources":["context/TodoContext.tsx","components/Form.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoContext","createContext","undefined","TodoProvider","props","useState","todoInput","setTodoInput","todos","setTodos","view","setView","filteredTodos","setFilteredTodos","useEffect","savedTodosInString","localStorage","getItem","savedTodos","JSON","parse","filter","todo","completed","filterMyTodos","setItem","stringify","Provider","value","children","useTodoContext","context","useContext","Error","Form","onSubmit","event","preventDefault","trim","length","prevTodos","id","Math","random","toString","text","type","className","onChange","target","name","TodoItem","onClick","newTodos","map","TodoList","todoList","todoItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d2833db.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\n\r\ninterface TodoType {\r\n  id: string;\r\n  text: string;\r\n  completed: boolean;\r\n}\r\n\r\ninterface ITodoContextType {\r\n  todoInput: string;\r\n  setTodoInput: React.Dispatch<React.SetStateAction<string>>;\r\n  todos: TodoType[];\r\n  setTodos: React.Dispatch<React.SetStateAction<TodoType[]>>;\r\n  view: string;\r\n  setView: React.Dispatch<React.SetStateAction<string>>;\r\n  filteredTodos: TodoType[];\r\n  setFilteredTodos: React.Dispatch<React.SetStateAction<TodoType[]>>;\r\n}\r\n\r\nexport const TodoContext =\r\n  createContext<ITodoContextType | undefined>(undefined);\r\n\r\nexport const TodoProvider: React.FC = (props) => {\r\n  const [todoInput, setTodoInput] = useState(\"\");\r\n  const [todos, setTodos] = useState<TodoType[]>([]);\r\n  const [view, setView] = useState(\"all\");\r\n  const [filteredTodos, setFilteredTodos] = useState<TodoType[]>([]);\r\n\r\n  useEffect(() => {\r\n    const savedTodosInString = localStorage.getItem(\"todos\");\r\n    if (savedTodosInString !== null) {\r\n      const savedTodos = JSON.parse(savedTodosInString);\r\n      setTodos(savedTodos);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const saveMyTodos = () => {\r\n      localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n    };\r\n    const filterMyTodos = () => {\r\n      switch (view) {\r\n        case \"completed\":\r\n          setFilteredTodos(todos.filter((todo) => todo.completed === true));\r\n          break;\r\n        case \"uncompleted\":\r\n          setFilteredTodos(todos.filter((todo) => todo.completed === false));\r\n          break;\r\n        default:\r\n          setFilteredTodos(todos);\r\n          break;\r\n      }\r\n    };\r\n    filterMyTodos();\r\n    saveMyTodos();\r\n  }, [todos, view]);\r\n\r\n  return (\r\n    <TodoContext.Provider\r\n      value={{\r\n        todoInput,\r\n        setTodoInput,\r\n        todos,\r\n        setTodos,\r\n        view,\r\n        setView,\r\n        filteredTodos,\r\n        setFilteredTodos,\r\n      }}\r\n      {...props}\r\n    >\r\n      {props.children}\r\n    </TodoContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTodoContext = () => {\r\n  const context = useContext(TodoContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"Please provide a value to provider\");\r\n  }\r\n  return context;\r\n};\r\n","import React from \"react\";\r\nimport { useTodoContext } from \"../context/TodoContext\";\r\n\r\nconst Form: React.FC = () => {\r\n  const { todoInput, setTodoInput, setTodos, view, setView } = useTodoContext();\r\n\r\n  const clearInput = () => {\r\n    setTodoInput(\"\");\r\n  };\r\n\r\n  const inputChangeHandler: React.ChangeEventHandler<HTMLInputElement> = (\r\n    event\r\n  ) => {\r\n    setTodoInput(event.target.value);\r\n  };\r\n\r\n  const formSubmitHandler: React.FormEventHandler<HTMLFormElement> = (\r\n    event\r\n  ) => {\r\n    event.preventDefault();\r\n    if (todoInput.trim().length === 0) {\r\n      return;\r\n    }\r\n    setTodos((prevTodos) => [\r\n      ...prevTodos,\r\n      {\r\n        id: Math.random().toString(),\r\n        text: todoInput,\r\n        completed: false,\r\n      },\r\n    ]);\r\n    clearInput();\r\n  };\r\n\r\n  const filterChangeHandler: React.ChangeEventHandler<HTMLSelectElement> = (\r\n    event\r\n  ) => {\r\n    setView(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={formSubmitHandler}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"todo-input\"\r\n        value={todoInput}\r\n        onChange={inputChangeHandler}\r\n      />\r\n      <button type=\"submit\" className=\"todo-button\">\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div className=\"select\">\r\n        <select\r\n          name=\"todos\"\r\n          className=\"filter-todo\"\r\n          value={view}\r\n          onChange={filterChangeHandler}\r\n        >\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { useTodoContext } from \"../context/TodoContext\";\r\n\r\ninterface TodoItemProps {\r\n  text: string;\r\n  id: string;\r\n  completed: boolean;\r\n}\r\n\r\nconst TodoItem: React.FC<TodoItemProps> = (props) => {\r\n  const { todos, setTodos } = useTodoContext();\r\n\r\n  const deleteBtnHandler: React.MouseEventHandler<HTMLButtonElement> = (\r\n    event\r\n  ) => {\r\n    const newTodos = todos.filter((todo) => todo.id !== props.id);\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const completeHandler: React.MouseEventHandler<HTMLButtonElement> = (\r\n    event\r\n  ) => {\r\n    const newTodos = todos.map((todo) => {\r\n      if (todo.id === props.id) {\r\n        return {\r\n          ...todo,\r\n          completed: !todo.completed,\r\n        };\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n      <li className={`todo-item ${props.completed ? \"completed\" : \"\"}`}>\r\n        {props.text}\r\n      </li>\r\n      <button\r\n        className=\"complete-btn\"\r\n        onClick={completeHandler}\r\n      >\r\n        <i className=\"fas fa-check\"></i>\r\n      </button>\r\n      <button className=\"trash-btn\" onClick={deleteBtnHandler}>\r\n        <i className=\"fas fa-trash\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport { useTodoContext } from \"../context/TodoContext\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst TodoList: React.FC = () => {\r\n  const { filteredTodos } = useTodoContext();\r\n\r\n  const todoList = filteredTodos.map((todoItem) => {\r\n    return <TodoItem key={todoItem.id} {...todoItem} />;\r\n  });\r\n\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">{todoList}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\nimport { TodoProvider } from \"./context/TodoContext\";\n\nconst App: React.FC = () => {\n  return (\n    <TodoProvider>\n      <div className=\"App\">\n        <header>\n          <h1>Creative Todo List</h1>\n        </header>\n        <Form />\n        <TodoList />\n      </div>\n    </TodoProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}